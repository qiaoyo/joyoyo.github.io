{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkLorum \u505a\u4ec0\u4e48\u7684 \u653e\u7f6e\u4e00\u4e9b\u91cd\u8981\u5b66\u79d1\u7684\u5b66\u4e60\u7b14\u8bb0\uff0c\u8bfe\u5916\u9879\u76ee\u7684\u8fc7\u7a0b\u4ee3\u7801\uff0c\u8fd8\u6709\u5076\u5c14\u5fc3\u60c5\u7279\u6b8a\u65f6\u4f1a\u5199\u7684\u5c0f\u4f5c\u6587\u3002 \u788e\u788e\u5ff5 \u5f53\u6211\u4eec\u56de\u671b\u751f\u547d\u7684\u5341\u5b57\u8def\u53e3\uff0c\u4f1a\u53d1\u73b0\u90a3\u4e9b\u5bf9\u5c06\u6765\u4ea7\u751f\u91cd\u5927\u5f71\u54cd\u7684\u65e5\u5b50\uff0c\u53ea\u662f\u751f\u547d\u4e2d\u5e73\u51e1\u7684\u4e00\u5929","title":"Home"},{"location":"#_1","text":"\u653e\u7f6e\u4e00\u4e9b\u91cd\u8981\u5b66\u79d1\u7684\u5b66\u4e60\u7b14\u8bb0\uff0c\u8bfe\u5916\u9879\u76ee\u7684\u8fc7\u7a0b\u4ee3\u7801\uff0c\u8fd8\u6709\u5076\u5c14\u5fc3\u60c5\u7279\u6b8a\u65f6\u4f1a\u5199\u7684\u5c0f\u4f5c\u6587\u3002","title":"\u505a\u4ec0\u4e48\u7684"},{"location":"#_2","text":"\u5f53\u6211\u4eec\u56de\u671b\u751f\u547d\u7684\u5341\u5b57\u8def\u53e3\uff0c\u4f1a\u53d1\u73b0\u90a3\u4e9b\u5bf9\u5c06\u6765\u4ea7\u751f\u91cd\u5927\u5f71\u54cd\u7684\u65e5\u5b50\uff0c\u53ea\u662f\u751f\u547d\u4e2d\u5e73\u51e1\u7684\u4e00\u5929","title":"\u788e\u788e\u5ff5"},{"location":"about/","text":"","title":"About"},{"location":"note/","text":"\u8be5\u7f51\u9875\u6682\u672a\u90e8\u7f72","title":"note"},{"location":"note/#_1","text":"","title":"\u8be5\u7f51\u9875\u6682\u672a\u90e8\u7f72"},{"location":"several%20coding%20methods%20of%20SNN/","text":"several coding methods of SNN 1. rate coding(Poisson coding) \u200b \u6700\u5e38\u7528\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u5c06\u6bcf\u4e00\u4e2a\u8f93\u5165\u50cf\u7d20\u8f6c\u6362\u4e3a\u8109\u51b2\u5e8f\u5217\uff0c\u6bd4\u8f83\u5178\u578b\u7684\u4e00\u79cd\u662f\u6cca\u677e\u5206\u5e03\u7684\u8109\u51b2\u5e8f\u5217\u3002\u53c2\u6570\u53ea\u6709\u4e00\u4e2a\u5566\uff0c\u5c31\u662f\u03bb\uff0c\u6839\u636e\u56fe\u50cf\u7684\u7070\u5ea6\u503c\u7b97\u51fa\u3002\u7136\u540e\u4e00\u4e9b\u9884\u8bbe\u7684\u53c2\u6570\u5305\u62ec time \uff0c dt \u3002\u5728 bindsnet \uff0c brian2 \u7684\u6e90\u7801\u4e2d\u90fd\u627e\u5230\u4e86 possionspike \u7684\u6e90\u7801\u3002 baian2/brian2/input/spikegeneratorgroup.py bindsnet/encoding/encodings.py class SpikeGeneratorGroup(Group, CodeRunner, SpikeSource): def poisson( datum: torch.Tensor, time: int, dt: float = 1.0, device=\"cpu\", approx=False, **kwargs ) -> torch.Tensor: \u200b bindsnet \u7684\u6e90\u4ee3\u7801\u91cc\u8fd8\u5206\u4e86 bernoulli \u548c possion \u4e24\u79cd\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u6cca\u677e\u5206\u5e03\u662f\u4f2f\u52aa\u5229\u5206\u5e03\u5728 n \u5f88\u5927\u800c p \u5f88\u5c0f\u65f6\u7684\u60c5\u51b5\u5427\uff0c\u770b\u60c5\u51b5\u4f7f\u7528\u3002 def single(#sparsity\u51b3\u5b9a\uff0c\u5927\u4e8e\u8be5\u503c\u7684\u662f1\uff0c\u5c0f\u4e8e\u7684\u662f0\uff0c\u9ed8\u8ba4\u662f\u4e2d\u4f4d\u6570 datum: torch.Tensor, time: int, dt: float = 1.0, sparsity: float = 0.5, device=\"cpu\", **kwargs, ) -> torch.Tensor: def bernoulli(#\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u7531max_prob\u51b3\u5b9a\uff0c\u6bcf\u4e2apixel\u6709max_prob\u7684\u6982\u7387\u4e3a1 datum: torch.Tensor, time: Optional[int] = None, dt: float = 1.0, device=\"cpu\", **kwargs, ) -> torch.Tensor: max_prob = kwargs.get(\"max_prob\", 1.0) spikes = torch.bernoulli(max_prob * datum.repeat([time, 1])) def poisson( datum: torch.Tensor, time: int, dt: float = 1.0, device=\"cpu\", **kwargs ) -> torch.Tensor: rate = torch.zeros(size, device=device) rate[datum != 0] = 1 / datum[datum != 0] * (time / dt) #\u6839\u636e\u6982\u7387\u4ea7\u751f\u8109\u51b2\u5e8f\u5217 dist = torch.distributions.Poisson(rate=rate) intervals = dist.sample(sample_shape=torch.Size([time + 1])) intervals[:, datum != 0] += (intervals[ :, datum != 0] == 0).float() times = torch.cumsum(intervals, dim=0).long() spikes = torch.zeros(time + 1, size, device=device).byte() spikes[times, torch.arange(size)] = 1 $$ P(X=k)=\\frac{\\lambda^k}{k!}*e^{-\\lambda} $$ 2. temporal coding \u200b \u65f6\u5dee\u7f16\u7801\uff1a\u5bf9\u4e00\u6bb5\u6cbf\u65f6\u95f4\u53d8\u5316\u7684\u6570\u636e\u7f16\u7801 diff[i]=danum[i+1]-datum[i] for i in range(size-1): threshold=diff.mean()+diff.std() for i in range(size-1): diff[i]=1 if diff[i]>threshold diff[i]=-1 if diff[i]<-threshold diff[i]=0 else \u200b bindsnet \u7684\u6e90\u7801\u4e2d\u8fd8\u7ed9\u4e86\u4e00\u79cdrank_order\u5e8f\u5217\u7684\u751f\u6210\u65b9\u6cd5\u5982\u4e0b\uff1a def rank_order(#\u6bcf\u4e2apixel\u53ea\u6709\u4e00\u4e2a1\uff0c\u8fd9\u4e2a1\u51fa\u73b0\u7684\u65f6\u95f4\u53d6\u51b3\u4e8e\u5b83\u7684\u503c\uff0c\u8d8a\u5927\uff0c\u51fa\u73b0\u7684\u8d8a\u65e9 datum: torch.Tensor, time: int, dt: float = 1.0, **kwargs ) -> torch.Tensor: times[datum != 0] = 1 / datum[datum != 0] times *= time / times.max() if 0 < times[i] < time: spikes[times[i] - 1, i] = 1 \u200b Time-to-first spike coding $$ F_ij=T*cos^2(\\frac{p_ij}{p_max}) $$ \u200b population rank order coding \u200b \u5bf9\u4e8e\u6bcf\u4e2a\u795e\u7ecf\u5143\uff0c\u6784\u9020\u4e00\u4e2aGRF\uff08\u9ad8\u65af\u611f\u77e5\u57df\uff09\u6765\u7f16\u7801\u5b83\u3002\u8fd9\u4e2aGRF\u4e2d\u5305\u62ecp\u4e2a\u795e\u7ecf\u5143\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u53c8\u6709\u4e00\u4e2a $$ (\\mu_{ij},\\sigma_{ij}) $$ $$ A_{ij}=e^{-\\frac{(s_i-\\mu_{ij})^2}{2*\\sigma_ij^2}} $$ \u8bf7\u6559\u4e00\u4e2a\u95ee\u9898\uff0c\u5728population coding\u7684\u65f6\u5019\uff0c\u5bf9\u4e00\u5f20\u56fe\u7247\u7f16\u7801\uff0c\u5047\u5982GRF\u662f\u4e00\u4e2a5 5\u7684\u8303\u56f4\uff0c\u7136\u540e\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2apixel\u6839\u636e $$ A_{ij}=e^{-\\frac{(s_i-\\mu_{ij})^2}{2 \\sigma_ij^2}} $$ \u8ba1\u7b97\u51fa\u4e00\u4e2aAij\u503c\uff08\u5176\u4e2dmu\u548csigma\u662f\u8fd925\u4e2a\u70b9\u7684\u5747\u503c\u548c\u65b9\u5dee\uff09\uff0c\u8fd9\u4e2aAij\u503c\u53cd\u6620\u4e86\u7ecf\u8fc7\u591a\u4e45\u8fd9\u4e2apixel\u624d\u80fd\u4ea7\u751f\u4e00\u4e2a\u8109\u51b2\u3002 \u8fd9\u4e2a\u7406\u89e3\u5bf9\u4e0d\u5bf9\u554a\uff1f\u8fd8\u6709\u5c31\u662f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u4e2a5*5\u7684\u8303\u56f4\u5e94\u8be5\u600e\u4e48\u53d6\uff1f\u5305\u62ec\u4e00\u4e2apixel\u7684\u65b9\u6846\u6709\u5f88\u591a\u53d6\u6cd5\u554a\u3002\u3002 loihi\u76f8\u5173\u9879\u76ee nengo models on Loihi (https://github.com/nengo/nengo-loihi) SNN toolbox ,a framework to transform rate-based ANN to SNN (https://github.com/NeuromorphicProcessorProject/snn_toolbox) S piking D eep D eterministic P olicy G radient for mapless navigation \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u65e0\u5730\u56fe\u5bfc\u822a (https://github.com/combra-lab/spiking-ddpg-mapless-navigation) reservoir computing framework for loihi \u50a8\u5907\u6c60\u8ba1\u7b97 (https://github.com/sagacitysite/pelenet) An Efficient Spiking Neural Network for Event-Based Autonomous Cars \u57fa\u4e8e\u4e8b\u4ef6\u7684\u81ea\u52a8\u9a7e\u9a76 (https://github.com/albertopolito/CarSNN) Project of the European Organization for Nuclear Research. process signal from CMS detector to determine the particle (https://github.com/Borzyszkowski/SNN-CMS) head pose estimation of the iCub robot \u673a\u5668\u4eba\u5934\u90e8\u59ff\u6001\u4f30\u8ba1 (https://github.com/RaphaelaK/head_pose_icub_loihi) multi-arm bandit using snn (https://github.com/wilkieolin/loihi_bandit) The neuromorphic PID for altitude control of MAVs with Loihi \u98de\u884c\u5668\u59ff\u6001\u63a7\u5236 spikinbg oculomotor network for robotic head control \u6a21\u4eff\u773c\u52a8\u5b9e\u73b0\u673a\u5668\u4eba\u5934\u90e8\u63a7\u5236 (https://github.com/combra-lab/spiking-oculomotor-head-control) \u4f1a\u8bae\u548c\u671f\u520a \u4f1a\u8bae \u7b49\u7ea7 \u540d\u79f0 \u65f6\u95f4 B\u7c7b ECAI : European Conference on Artificial Intelligence 2022-01-14 C\u7c7b ICPR : International Conference on Pattern Recognition 2022-01-17 \u671f\u520a \u7b49\u7ea7 \u671f\u520a\u540d\u79f0 \u4e13\u520a\u540d\u79f0 \u65f6\u95f4 \u5f71\u54cd\u56e0\u5b50 B\u7c7b Neural Networks Lifelong Learning 2022-02-28 5.535 B\u7c7b Pattern Recognition Open World Robust Pattern Recognition 2022-01-30 7.196 B\u7c7b Practical Deep Learning in the Wild 2022-11-01 7.196 \u5de5\u7a0b\u6280\u672f - 2\u533a MEASUREMENT Time-to-Digital Converters, Time-Mode Approaches and Applications\uff1a\uff08Temporal processing in Spiking Neural Networks\uff09 2022-02-28 3.364 \u8ba1\u7b97\u673a\u79d1\u5b66 - 2\u533a ISA TRANSACTIONS Advances in Computational Intelligence for Perception and Decision Making for Autonomous Systems 2022-04-05 4.305","title":"about"},{"location":"several%20coding%20methods%20of%20SNN/#several-coding-methods-of-snn","text":"","title":"several coding methods of SNN"},{"location":"several%20coding%20methods%20of%20SNN/#1-rate-codingpoisson-coding","text":"\u200b \u6700\u5e38\u7528\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u5c06\u6bcf\u4e00\u4e2a\u8f93\u5165\u50cf\u7d20\u8f6c\u6362\u4e3a\u8109\u51b2\u5e8f\u5217\uff0c\u6bd4\u8f83\u5178\u578b\u7684\u4e00\u79cd\u662f\u6cca\u677e\u5206\u5e03\u7684\u8109\u51b2\u5e8f\u5217\u3002\u53c2\u6570\u53ea\u6709\u4e00\u4e2a\u5566\uff0c\u5c31\u662f\u03bb\uff0c\u6839\u636e\u56fe\u50cf\u7684\u7070\u5ea6\u503c\u7b97\u51fa\u3002\u7136\u540e\u4e00\u4e9b\u9884\u8bbe\u7684\u53c2\u6570\u5305\u62ec time \uff0c dt \u3002\u5728 bindsnet \uff0c brian2 \u7684\u6e90\u7801\u4e2d\u90fd\u627e\u5230\u4e86 possionspike \u7684\u6e90\u7801\u3002 baian2/brian2/input/spikegeneratorgroup.py bindsnet/encoding/encodings.py class SpikeGeneratorGroup(Group, CodeRunner, SpikeSource): def poisson( datum: torch.Tensor, time: int, dt: float = 1.0, device=\"cpu\", approx=False, **kwargs ) -> torch.Tensor: \u200b bindsnet \u7684\u6e90\u4ee3\u7801\u91cc\u8fd8\u5206\u4e86 bernoulli \u548c possion \u4e24\u79cd\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u6cca\u677e\u5206\u5e03\u662f\u4f2f\u52aa\u5229\u5206\u5e03\u5728 n \u5f88\u5927\u800c p \u5f88\u5c0f\u65f6\u7684\u60c5\u51b5\u5427\uff0c\u770b\u60c5\u51b5\u4f7f\u7528\u3002 def single(#sparsity\u51b3\u5b9a\uff0c\u5927\u4e8e\u8be5\u503c\u7684\u662f1\uff0c\u5c0f\u4e8e\u7684\u662f0\uff0c\u9ed8\u8ba4\u662f\u4e2d\u4f4d\u6570 datum: torch.Tensor, time: int, dt: float = 1.0, sparsity: float = 0.5, device=\"cpu\", **kwargs, ) -> torch.Tensor: def bernoulli(#\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u7531max_prob\u51b3\u5b9a\uff0c\u6bcf\u4e2apixel\u6709max_prob\u7684\u6982\u7387\u4e3a1 datum: torch.Tensor, time: Optional[int] = None, dt: float = 1.0, device=\"cpu\", **kwargs, ) -> torch.Tensor: max_prob = kwargs.get(\"max_prob\", 1.0) spikes = torch.bernoulli(max_prob * datum.repeat([time, 1])) def poisson( datum: torch.Tensor, time: int, dt: float = 1.0, device=\"cpu\", **kwargs ) -> torch.Tensor: rate = torch.zeros(size, device=device) rate[datum != 0] = 1 / datum[datum != 0] * (time / dt) #\u6839\u636e\u6982\u7387\u4ea7\u751f\u8109\u51b2\u5e8f\u5217 dist = torch.distributions.Poisson(rate=rate) intervals = dist.sample(sample_shape=torch.Size([time + 1])) intervals[:, datum != 0] += (intervals[ :, datum != 0] == 0).float() times = torch.cumsum(intervals, dim=0).long() spikes = torch.zeros(time + 1, size, device=device).byte() spikes[times, torch.arange(size)] = 1 $$ P(X=k)=\\frac{\\lambda^k}{k!}*e^{-\\lambda} $$","title":"1.  rate coding(Poisson coding)"},{"location":"several%20coding%20methods%20of%20SNN/#2-temporal-coding","text":"\u200b \u65f6\u5dee\u7f16\u7801\uff1a\u5bf9\u4e00\u6bb5\u6cbf\u65f6\u95f4\u53d8\u5316\u7684\u6570\u636e\u7f16\u7801 diff[i]=danum[i+1]-datum[i] for i in range(size-1): threshold=diff.mean()+diff.std() for i in range(size-1): diff[i]=1 if diff[i]>threshold diff[i]=-1 if diff[i]<-threshold diff[i]=0 else \u200b bindsnet \u7684\u6e90\u7801\u4e2d\u8fd8\u7ed9\u4e86\u4e00\u79cdrank_order\u5e8f\u5217\u7684\u751f\u6210\u65b9\u6cd5\u5982\u4e0b\uff1a def rank_order(#\u6bcf\u4e2apixel\u53ea\u6709\u4e00\u4e2a1\uff0c\u8fd9\u4e2a1\u51fa\u73b0\u7684\u65f6\u95f4\u53d6\u51b3\u4e8e\u5b83\u7684\u503c\uff0c\u8d8a\u5927\uff0c\u51fa\u73b0\u7684\u8d8a\u65e9 datum: torch.Tensor, time: int, dt: float = 1.0, **kwargs ) -> torch.Tensor: times[datum != 0] = 1 / datum[datum != 0] times *= time / times.max() if 0 < times[i] < time: spikes[times[i] - 1, i] = 1 \u200b Time-to-first spike coding $$ F_ij=T*cos^2(\\frac{p_ij}{p_max}) $$ \u200b population rank order coding \u200b \u5bf9\u4e8e\u6bcf\u4e2a\u795e\u7ecf\u5143\uff0c\u6784\u9020\u4e00\u4e2aGRF\uff08\u9ad8\u65af\u611f\u77e5\u57df\uff09\u6765\u7f16\u7801\u5b83\u3002\u8fd9\u4e2aGRF\u4e2d\u5305\u62ecp\u4e2a\u795e\u7ecf\u5143\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u53c8\u6709\u4e00\u4e2a $$ (\\mu_{ij},\\sigma_{ij}) $$ $$ A_{ij}=e^{-\\frac{(s_i-\\mu_{ij})^2}{2*\\sigma_ij^2}} $$ \u8bf7\u6559\u4e00\u4e2a\u95ee\u9898\uff0c\u5728population coding\u7684\u65f6\u5019\uff0c\u5bf9\u4e00\u5f20\u56fe\u7247\u7f16\u7801\uff0c\u5047\u5982GRF\u662f\u4e00\u4e2a5 5\u7684\u8303\u56f4\uff0c\u7136\u540e\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2apixel\u6839\u636e $$ A_{ij}=e^{-\\frac{(s_i-\\mu_{ij})^2}{2 \\sigma_ij^2}} $$ \u8ba1\u7b97\u51fa\u4e00\u4e2aAij\u503c\uff08\u5176\u4e2dmu\u548csigma\u662f\u8fd925\u4e2a\u70b9\u7684\u5747\u503c\u548c\u65b9\u5dee\uff09\uff0c\u8fd9\u4e2aAij\u503c\u53cd\u6620\u4e86\u7ecf\u8fc7\u591a\u4e45\u8fd9\u4e2apixel\u624d\u80fd\u4ea7\u751f\u4e00\u4e2a\u8109\u51b2\u3002 \u8fd9\u4e2a\u7406\u89e3\u5bf9\u4e0d\u5bf9\u554a\uff1f\u8fd8\u6709\u5c31\u662f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u4e2a5*5\u7684\u8303\u56f4\u5e94\u8be5\u600e\u4e48\u53d6\uff1f\u5305\u62ec\u4e00\u4e2apixel\u7684\u65b9\u6846\u6709\u5f88\u591a\u53d6\u6cd5\u554a\u3002\u3002","title":"2.  temporal coding"},{"location":"several%20coding%20methods%20of%20SNN/#loihi","text":"nengo models on Loihi (https://github.com/nengo/nengo-loihi) SNN toolbox ,a framework to transform rate-based ANN to SNN (https://github.com/NeuromorphicProcessorProject/snn_toolbox) S piking D eep D eterministic P olicy G radient for mapless navigation \u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u65e0\u5730\u56fe\u5bfc\u822a (https://github.com/combra-lab/spiking-ddpg-mapless-navigation) reservoir computing framework for loihi \u50a8\u5907\u6c60\u8ba1\u7b97 (https://github.com/sagacitysite/pelenet) An Efficient Spiking Neural Network for Event-Based Autonomous Cars \u57fa\u4e8e\u4e8b\u4ef6\u7684\u81ea\u52a8\u9a7e\u9a76 (https://github.com/albertopolito/CarSNN) Project of the European Organization for Nuclear Research. process signal from CMS detector to determine the particle (https://github.com/Borzyszkowski/SNN-CMS) head pose estimation of the iCub robot \u673a\u5668\u4eba\u5934\u90e8\u59ff\u6001\u4f30\u8ba1 (https://github.com/RaphaelaK/head_pose_icub_loihi) multi-arm bandit using snn (https://github.com/wilkieolin/loihi_bandit) The neuromorphic PID for altitude control of MAVs with Loihi \u98de\u884c\u5668\u59ff\u6001\u63a7\u5236 spikinbg oculomotor network for robotic head control \u6a21\u4eff\u773c\u52a8\u5b9e\u73b0\u673a\u5668\u4eba\u5934\u90e8\u63a7\u5236 (https://github.com/combra-lab/spiking-oculomotor-head-control)","title":"loihi\u76f8\u5173\u9879\u76ee"},{"location":"several%20coding%20methods%20of%20SNN/#_1","text":"","title":"\u4f1a\u8bae\u548c\u671f\u520a"},{"location":"several%20coding%20methods%20of%20SNN/#_2","text":"\u7b49\u7ea7 \u540d\u79f0 \u65f6\u95f4 B\u7c7b ECAI : European Conference on Artificial Intelligence 2022-01-14 C\u7c7b ICPR : International Conference on Pattern Recognition 2022-01-17","title":"\u4f1a\u8bae"},{"location":"several%20coding%20methods%20of%20SNN/#_3","text":"\u7b49\u7ea7 \u671f\u520a\u540d\u79f0 \u4e13\u520a\u540d\u79f0 \u65f6\u95f4 \u5f71\u54cd\u56e0\u5b50 B\u7c7b Neural Networks Lifelong Learning 2022-02-28 5.535 B\u7c7b Pattern Recognition Open World Robust Pattern Recognition 2022-01-30 7.196 B\u7c7b Practical Deep Learning in the Wild 2022-11-01 7.196 \u5de5\u7a0b\u6280\u672f - 2\u533a MEASUREMENT Time-to-Digital Converters, Time-Mode Approaches and Applications\uff1a\uff08Temporal processing in Spiking Neural Networks\uff09 2022-02-28 3.364 \u8ba1\u7b97\u673a\u79d1\u5b66 - 2\u533a ISA TRANSACTIONS Advances in Computational Intelligence for Perception and Decision Making for Autonomous Systems 2022-04-05 4.305","title":"\u671f\u520a"},{"location":"sixfoot/","text":"\u6539\u8fdb\u80cc\u90e8\u5173\u8282\u7684\u516d\u8db3\u673a\u5668\u4eba\u8bb0\u5f55 \u200b \u7ecf\u8fc7\u540c\u5b66\u7684\u4ecb\u7ecd\uff0c\u77e5\u9053\u4e86 mkdocs \uff0c\u4ee5\u53ca\u5728\u7ec3\u4e60\u53cc\u62fc\u8f93\u5165\uff0c\u6545\u5bf9\u5199\u4e2a\u4eba\u535a\u5ba2\u4ea7\u751f\u4e86\u5174\u8da3\u3002\u6628\u5929\u665a\u4e0a\u8bd5\u4e86\u5f88\u4e45\uff0c\u5b9e\u73b0\u4e86 mkdocs \u5728 github \u7684\u9759\u6001\u7f51\u9875\u4e0a\u7684\u90e8\u7f72\uff0c\u4eca\u5929\u51b3\u5b9a\u4ee5\u8fd9\u4e2a\u5927\u4e09\u5b66\u671f\u505a\u7684\u9879\u76ee\u4f5c\u4e3a\u5f00\u59cb\u3002\u5728\u4ee5\u524d\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5e38\u5e38\u53ea\u6ce8\u91cd\u601d\u7ef4\u4e0a\u7684\u7406\u89e3\u548c\u8054\u7cfb\uff0c\u5f88\u5c11\u505a\u7b14\u4e0b\u6587\u7ae0\uff0c\u5199\u6587\u5b57\u4f1a\u8ba9\u4eba\u66f4\u5bb9\u6613\u4e13\u6ce8\uff0c\u4e4b\u540e\u8fd8\u6253\u7b97\u628a\u4e00\u4e9b\u57fa\u7840\u5b66\u79d1\u7684\u77e5\u8bc6\u6574\u7406\u548c\u8bfe\u5916\u7684\u5b66\u4e60\u9010\u6e10\u653e\u4e0a\u6765 ^_^\u3002 \u524d\u8a00 \u5927\u4e09\u8fd9\u4e2a\u5b66\u5e74\u65e0\u7591\u662f\u5bf9\u6211\u6bd4\u8f83\u8270\u96be\u7684\u4e00\u4e2a\u5b66\u5e74\uff0c\u603b\u7684\u65cb\u5f8b\u662f\u4e3a\u4e86\u4fdd\u7814\u5728\u52aa\u529b\u5427\u3002\u5927\u4e09\u4e0a\uff0c\u5b66\u9662\u6709\u4e00\u5929\u516c\u5e03\u4e86\u4e00\u4e9b\u5b66\u9662\u7acb\u9879\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u53c2\u52a0\u51af\u5982\u676f\uff0c\u4e8e\u662f\u62a5\u4e86\u540d\uff0c\u9009\u62e9\u4e86\u5982\u9898\u7684\u9879\u76ee\u3002 \u5bd2\u5047 \u6700\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8001\u5e08\u7ed9\u4e86\u4e00\u4efd\u7b80\u5355\u7684\u4ecb\u7ecd\uff0c\u5305\u62ec\u4e4b\u524d\u7684\u6837\u673a\u56fe\u7247\uff0c\u8fd0\u52a8\u5b66\u7684\u6c42\u89e3\u65b9\u6cd5\uff0c\u8981\u901a\u8fc7 webots \u4eff\u771f\u7684\u4e8b\u60c5\u3002\u9996\u5148\u7ed9\u7684\u4efb\u52a1\u662f\u201c\u719f\u6089 Webots \u4eff\u771f\u8f6f\u4ef6\u3002\u81ea\u5df1\u642d\u7b80\u5355\u7684\u516d\u8db3\u673a\u5668\u4eba\u5e76\u63a7\u5236\u4ed6\u884c\u8d70\uff0c\u4e4b\u540e\u518d\u5728\u673a\u6784\u3001\u63a7\u5236\u548c\u89c6\u89c9\u4e09\u4e2a\u90e8\u5206\u91cc\u9009\u62e9\u4e00\u4e2a\u505a\u201d\u3002 \u200b \u8fd9\u592a\u660e\u663e\u4e0d\u8fc7\u4e86\uff0c\u8fd9\u662f\u8003\u9a8c\u3002\u90a3\u5bd2\u5047\u5c31\u505a\u5457\u3002\u7ec4\u91cc\u4eba\u633a\u591a\u7684\uff0c\u8c01\u77e5\u9053\u8c01\u662f\u5728\u771f\u7684\u5e72\u6d3b\u5462\uff0c\u6211\u5148\u81ea\u5df1\u7740\u624b\u505a\u597d\u5427\u3002 ### Webots \u7ec4\u6210\u903b\u8f91\u548c\u7b2c\u4e00\u4e2a\u642d\u5efa\u7684\u673a\u5668\u4eba \u200b Webots \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u591a\u5e73\u53f0\u673a\u5668\u4eba\u4eff\u771f\u5e73\u53f0\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u673a\u5668\u4eba\u5efa\u6a21\u3001\u7f16\u7a0b\u548c\u8fd0\u52a8\u4eff\u771f\u5f00\u53d1\u73af\u5883\u3002\u8bbe\u8ba1\u4e3a\u4e13\u4e1a\u7528\u9014\uff0c\u5e7f\u6cdb\u4f7f\u7528\u4e8e\u5de5\u4e1a\u3001\u6559\u80b2\u4e0e\u7814\u7a76\uff08\u624b\u7ffb\u8bd1\u7684\uff09\u3002 \u200b Webots: robot simulator (cyberbotics.com) \u200b Webots \u7684\u7ec4\u6210\u903b\u8f91\u5176\u5b9e\u662f\u5f88\u6709\u610f\u601d\u800c\u4e14\u9ad8\u6548\u7684\u3002\u6bcf\u4e2a\u6587\u4ef6\u79f0\u4e3a world \uff08\u4e16\u754c\uff09\uff0c\u8fd9\u4e2a world \u7531\u8bb8\u591a node \u7ec4\u6210\u3002 node \u5305\u62ec\uff1a \u200b Worldinfo \uff1a\u4e16\u754c\u4fe1\u606f\uff0c\u5b58\u50a8\u548c\u8bbe\u7f6e\u91cd\u529b\u3001\u4eff\u771f\u5e27\u7387\uff0c\u6807\u9898\u7b49\u4fe1\u606f\u3002 \u200b Viewpoint \uff1a\u9884\u89c8\u3001\u8fd0\u884c\u7684\u89c6\u89d2\u8bbe\u7f6e\u3002 \u200b Floor \uff1a\u5730\u9762\uff0c\u5305\u62ec\u8272\u5f69\u3001\u5927\u5c0f\u3001\u65cb\u8f6c\u7b49\u5c5e\u6027\u3002 \u200b Robot \uff1a\u673a\u5668\u4eba\u4e3b\u4f53\u3002\u5728\u8fd9\u91cc\u4ece0\u5f00\u59cb\u642d\u5efa\u673a\u5668\u4eba\u7684\u7ed3\u6784\u3002 \u200b \u4e0b\u9762\u91cd\u8981\u4ecb\u7ecd\u4e00\u4e0b\u642d\u5efa robot \u6a21\u5757\u7684\u8fc7\u7a0b\u3002 \u200b \u200b \u539f\u6765\u6211\u81ea\u5df1\u4ece\u5e95\u5c42\u642d\u7684\u7b80\u964b\u673a\u5668\u4eba\u5728\u65e7\u7684\u7535\u8111\u4e0a\uff0c\u65e7\u7535\u8111\u5728\u5bb6\u91cc\u6401\u7f6e\u4e86\u3002\u8fd9\u91cc\u7528\u6700\u540e\u7684\u6210\u54c1\u56fe\u9876\u4e00\u4e0b\u3002\u8fd9\u662f\u53e6\u4e00\u4e2a\u4e00\u8d77\u7684\u5f90\u6e05\u539f\u540c\u5b66\u505a\u7684\u3002\u6211\u4e3b\u8981\u8d1f\u8d23\u7684\u662f\u89c6\u89c9\u90e8\u5206\u7684\u4ee3\u7801\u3002 \u200b \u200b \u6211\u5f53\u65f6\u505a\u5b8c\u7ed9\u8001\u5e08\u770b\u7684\u4e1c\u897f\uff0c\u5c31\u662f\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f\u7684\u7b80\u5316\u7248\uff0c\u673a\u4f53\u7528\u4e00\u4e2a\u77e9\u5f62\u4ee3\u66ff\uff0c\u6bcf\u4e2a\u8235\u673a\u7528\u5706\u67f1\u4ee3\u66ff\uff0c\u8fde\u63a5\u7684\u90e8\u5206\u7528\u957f\u65b9\u4f53\u4ee3\u66ff\uff0c\u7136\u540e\u5728\u8f6f\u4ef6\u91cc\u5b9e\u73b0\u4e86\u673a\u5668\u4eba\u7684\u884c\u8fdb\u548c\u8f6c\u5411\u6a21\u62df\u3002 \u200b \u5927\u4e09\u4e0b","title":"\u6539\u8fdb\u80cc\u90e8\u5173\u8282\u7684\u516d\u8db3\u673a\u5668\u4eba\u8bb0\u5f55"},{"location":"sixfoot/#_1","text":"\u200b \u7ecf\u8fc7\u540c\u5b66\u7684\u4ecb\u7ecd\uff0c\u77e5\u9053\u4e86 mkdocs \uff0c\u4ee5\u53ca\u5728\u7ec3\u4e60\u53cc\u62fc\u8f93\u5165\uff0c\u6545\u5bf9\u5199\u4e2a\u4eba\u535a\u5ba2\u4ea7\u751f\u4e86\u5174\u8da3\u3002\u6628\u5929\u665a\u4e0a\u8bd5\u4e86\u5f88\u4e45\uff0c\u5b9e\u73b0\u4e86 mkdocs \u5728 github \u7684\u9759\u6001\u7f51\u9875\u4e0a\u7684\u90e8\u7f72\uff0c\u4eca\u5929\u51b3\u5b9a\u4ee5\u8fd9\u4e2a\u5927\u4e09\u5b66\u671f\u505a\u7684\u9879\u76ee\u4f5c\u4e3a\u5f00\u59cb\u3002\u5728\u4ee5\u524d\u7684\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5e38\u5e38\u53ea\u6ce8\u91cd\u601d\u7ef4\u4e0a\u7684\u7406\u89e3\u548c\u8054\u7cfb\uff0c\u5f88\u5c11\u505a\u7b14\u4e0b\u6587\u7ae0\uff0c\u5199\u6587\u5b57\u4f1a\u8ba9\u4eba\u66f4\u5bb9\u6613\u4e13\u6ce8\uff0c\u4e4b\u540e\u8fd8\u6253\u7b97\u628a\u4e00\u4e9b\u57fa\u7840\u5b66\u79d1\u7684\u77e5\u8bc6\u6574\u7406\u548c\u8bfe\u5916\u7684\u5b66\u4e60\u9010\u6e10\u653e\u4e0a\u6765 ^_^\u3002","title":"\u6539\u8fdb\u80cc\u90e8\u5173\u8282\u7684\u516d\u8db3\u673a\u5668\u4eba\u8bb0\u5f55"},{"location":"sixfoot/#_2","text":"\u5927\u4e09\u8fd9\u4e2a\u5b66\u5e74\u65e0\u7591\u662f\u5bf9\u6211\u6bd4\u8f83\u8270\u96be\u7684\u4e00\u4e2a\u5b66\u5e74\uff0c\u603b\u7684\u65cb\u5f8b\u662f\u4e3a\u4e86\u4fdd\u7814\u5728\u52aa\u529b\u5427\u3002\u5927\u4e09\u4e0a\uff0c\u5b66\u9662\u6709\u4e00\u5929\u516c\u5e03\u4e86\u4e00\u4e9b\u5b66\u9662\u7acb\u9879\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u53c2\u52a0\u51af\u5982\u676f\uff0c\u4e8e\u662f\u62a5\u4e86\u540d\uff0c\u9009\u62e9\u4e86\u5982\u9898\u7684\u9879\u76ee\u3002","title":"\u524d\u8a00"},{"location":"sixfoot/#_3","text":"\u6700\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8001\u5e08\u7ed9\u4e86\u4e00\u4efd\u7b80\u5355\u7684\u4ecb\u7ecd\uff0c\u5305\u62ec\u4e4b\u524d\u7684\u6837\u673a\u56fe\u7247\uff0c\u8fd0\u52a8\u5b66\u7684\u6c42\u89e3\u65b9\u6cd5\uff0c\u8981\u901a\u8fc7 webots \u4eff\u771f\u7684\u4e8b\u60c5\u3002\u9996\u5148\u7ed9\u7684\u4efb\u52a1\u662f\u201c\u719f\u6089 Webots \u4eff\u771f\u8f6f\u4ef6\u3002\u81ea\u5df1\u642d\u7b80\u5355\u7684\u516d\u8db3\u673a\u5668\u4eba\u5e76\u63a7\u5236\u4ed6\u884c\u8d70\uff0c\u4e4b\u540e\u518d\u5728\u673a\u6784\u3001\u63a7\u5236\u548c\u89c6\u89c9\u4e09\u4e2a\u90e8\u5206\u91cc\u9009\u62e9\u4e00\u4e2a\u505a\u201d\u3002 \u200b \u8fd9\u592a\u660e\u663e\u4e0d\u8fc7\u4e86\uff0c\u8fd9\u662f\u8003\u9a8c\u3002\u90a3\u5bd2\u5047\u5c31\u505a\u5457\u3002\u7ec4\u91cc\u4eba\u633a\u591a\u7684\uff0c\u8c01\u77e5\u9053\u8c01\u662f\u5728\u771f\u7684\u5e72\u6d3b\u5462\uff0c\u6211\u5148\u81ea\u5df1\u7740\u624b\u505a\u597d\u5427\u3002 ### Webots \u7ec4\u6210\u903b\u8f91\u548c\u7b2c\u4e00\u4e2a\u642d\u5efa\u7684\u673a\u5668\u4eba \u200b Webots \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u591a\u5e73\u53f0\u673a\u5668\u4eba\u4eff\u771f\u5e73\u53f0\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u673a\u5668\u4eba\u5efa\u6a21\u3001\u7f16\u7a0b\u548c\u8fd0\u52a8\u4eff\u771f\u5f00\u53d1\u73af\u5883\u3002\u8bbe\u8ba1\u4e3a\u4e13\u4e1a\u7528\u9014\uff0c\u5e7f\u6cdb\u4f7f\u7528\u4e8e\u5de5\u4e1a\u3001\u6559\u80b2\u4e0e\u7814\u7a76\uff08\u624b\u7ffb\u8bd1\u7684\uff09\u3002 \u200b Webots: robot simulator (cyberbotics.com) \u200b Webots \u7684\u7ec4\u6210\u903b\u8f91\u5176\u5b9e\u662f\u5f88\u6709\u610f\u601d\u800c\u4e14\u9ad8\u6548\u7684\u3002\u6bcf\u4e2a\u6587\u4ef6\u79f0\u4e3a world \uff08\u4e16\u754c\uff09\uff0c\u8fd9\u4e2a world \u7531\u8bb8\u591a node \u7ec4\u6210\u3002 node \u5305\u62ec\uff1a \u200b Worldinfo \uff1a\u4e16\u754c\u4fe1\u606f\uff0c\u5b58\u50a8\u548c\u8bbe\u7f6e\u91cd\u529b\u3001\u4eff\u771f\u5e27\u7387\uff0c\u6807\u9898\u7b49\u4fe1\u606f\u3002 \u200b Viewpoint \uff1a\u9884\u89c8\u3001\u8fd0\u884c\u7684\u89c6\u89d2\u8bbe\u7f6e\u3002 \u200b Floor \uff1a\u5730\u9762\uff0c\u5305\u62ec\u8272\u5f69\u3001\u5927\u5c0f\u3001\u65cb\u8f6c\u7b49\u5c5e\u6027\u3002 \u200b Robot \uff1a\u673a\u5668\u4eba\u4e3b\u4f53\u3002\u5728\u8fd9\u91cc\u4ece0\u5f00\u59cb\u642d\u5efa\u673a\u5668\u4eba\u7684\u7ed3\u6784\u3002 \u200b \u4e0b\u9762\u91cd\u8981\u4ecb\u7ecd\u4e00\u4e0b\u642d\u5efa robot \u6a21\u5757\u7684\u8fc7\u7a0b\u3002 \u200b \u200b \u539f\u6765\u6211\u81ea\u5df1\u4ece\u5e95\u5c42\u642d\u7684\u7b80\u964b\u673a\u5668\u4eba\u5728\u65e7\u7684\u7535\u8111\u4e0a\uff0c\u65e7\u7535\u8111\u5728\u5bb6\u91cc\u6401\u7f6e\u4e86\u3002\u8fd9\u91cc\u7528\u6700\u540e\u7684\u6210\u54c1\u56fe\u9876\u4e00\u4e0b\u3002\u8fd9\u662f\u53e6\u4e00\u4e2a\u4e00\u8d77\u7684\u5f90\u6e05\u539f\u540c\u5b66\u505a\u7684\u3002\u6211\u4e3b\u8981\u8d1f\u8d23\u7684\u662f\u89c6\u89c9\u90e8\u5206\u7684\u4ee3\u7801\u3002 \u200b \u200b \u6211\u5f53\u65f6\u505a\u5b8c\u7ed9\u8001\u5e08\u770b\u7684\u4e1c\u897f\uff0c\u5c31\u662f\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f\u7684\u7b80\u5316\u7248\uff0c\u673a\u4f53\u7528\u4e00\u4e2a\u77e9\u5f62\u4ee3\u66ff\uff0c\u6bcf\u4e2a\u8235\u673a\u7528\u5706\u67f1\u4ee3\u66ff\uff0c\u8fde\u63a5\u7684\u90e8\u5206\u7528\u957f\u65b9\u4f53\u4ee3\u66ff\uff0c\u7136\u540e\u5728\u8f6f\u4ef6\u91cc\u5b9e\u73b0\u4e86\u673a\u5668\u4eba\u7684\u884c\u8fdb\u548c\u8f6c\u5411\u6a21\u62df\u3002 \u200b","title":"\u5bd2\u5047"},{"location":"sixfoot/#_4","text":"","title":"\u5927\u4e09\u4e0b"},{"location":"sth%20to%20say/","text":"\u8be5\u7f51\u9875\u6682\u672a\u90e8\u7f72\u3002","title":"sth to say"},{"location":"sth%20to%20say/#_1","text":"","title":"\u8be5\u7f51\u9875\u6682\u672a\u90e8\u7f72\u3002"}]}